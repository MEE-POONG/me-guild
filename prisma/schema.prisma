generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserDB {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  discord_id    String          @unique
  username      String
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  createdBy     String?
  updatedAt     DateTime        @updatedAt
  updatedBy     String
  deleteBy      String
  gameMatchDB   GameMatchDB[]
  userGameRank  UserGameRank[]
  creditPointDB CreditPointDB[]
}

model CheckOnlineDB {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id         String
  checkIn         DateTime  @default(now())
  checkOut        DateTime?
  totalOnlineTime Int       @default(0)
  createdAt       DateTime  @default(now())
  createdBy       String?
  updatedAt       DateTime  @updatedAt
  updatedBy       String
  deleteBy        String
}

model CreditPointDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userDB      UserDB   @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  points      Int      @default(0)
  totalPoints Int
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String
  deleteBy    String
}

model PointHistoryDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  discord_id  String
  points      Int
  description String
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String
  deleteBy    String
}

model GameOnlineDB {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  game_name            String
  dis_RoomID           String
  createdAt            DateTime               @default(now())
  createdBy            String?
  updatedAt            DateTime               @updatedAt
  updatedBy            String?
  deleteBy             String?
  conditionGameMatchDB ConditionGameMatchDB[]
  rankGame             RankGameDB[]
  gameMatchDB          GameMatchDB[]
  userGameRank         UserGameRank[]
  gameTypeGame         GameTypeGame[]
}

model GameCategoryDB {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  createdAt DateTime     @default(now())
  createdBy String?
  updatedAt DateTime     @updatedAt
  updatedBy String
  deleteBy  String
  gameTypes GameTypeDB[]
}

model GameTypeDB {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  createdAt      DateTime       @default(now())
  createdBy      String?
  updatedAt      DateTime       @updatedAt
  updatedBy      String
  deleteBy       String
  categoryId     String         @db.ObjectId
  gameCategoryDB GameCategoryDB @relation(fields: [categoryId], references: [id])
  gameTypeGame   GameTypeGame[]
}

model GameTypeGame {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  gameId       String       @db.ObjectId
  typeId       String       @db.ObjectId
  createdAt    DateTime     @default(now())
  createdBy    String?
  updatedAt    DateTime     @updatedAt
  updatedBy    String
  deleteBy     String
  gameOnlineDB GameOnlineDB @relation(fields: [gameId], references: [id])
  gameTypeDB   GameTypeDB   @relation(fields: [typeId], references: [id])
}

model GameMatchDB {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  user         UserDB       @relation(fields: [userId], references: [id])
  userId       String       @db.ObjectId
  gameOnlineDB GameOnlineDB @relation(fields: [gameId], references: [id])
  gameId       String       @db.ObjectId
  rank         Boolean
  rankGameDB   RankGameDB?  @relation(fields: [selectRankID], references: [id])
  selectRankID String?      @db.ObjectId
  members      String[]
  createdAt    DateTime     @default(now())
  createdBy    String?
  updatedAt    DateTime     @updatedAt
  updatedBy    String
  deleteBy     String
}

model ConditionGameMatchDB {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  gameId       String       @db.ObjectId
  gameOnlineDB GameOnlineDB @relation(fields: [gameId], references: [id])
  maxParty     Int
  matchRank    Boolean
  limitNumber  Int          @default(0)
  createdAt    DateTime     @default(now())
  createdBy    String?
  updatedAt    DateTime     @updatedAt
  updatedBy    String
  deleteBy     String
}

model RankGameDB {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  nameRank     String
  imgRank      String
  number       Int
  gameId       String         @db.ObjectId
  gameOnlineDB GameOnlineDB   @relation(fields: [gameId], references: [id])
  gameMatchDB  GameMatchDB[]
  createdAt    DateTime       @default(now())
  createdBy    String?
  updatedAt    DateTime       @updatedAt
  updatedBy    String
  deleteBy     String
  userGameRank UserGameRank[]
}

model UserGameRank {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  gameOnlineDB GameOnlineDB @relation(fields: [gameId], references: [id])
  gameId       String       @db.ObjectId
  UserDB       UserDB       @relation(fields: [userId], references: [id])
  userId       String       @db.ObjectId
  rankGameDB   RankGameDB?  @relation(fields: [rankGameId], references: [id])
  rankGameId   String?      @db.ObjectId
  invitation   Boolean
  createdAt    DateTime     @default(now())
  createdBy    String?
  updatedAt    DateTime     @updatedAt
  updatedBy    String
  deleteBy     String
}

model DiscordID {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  discord_ID String
  nameCheck  String
  type       String
  server     String
  customer   CustomerDB @relation(fields: [customerId], references: [id])
  customerId String     @db.ObjectId
}

model CustomerDB {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  discord_id String      @unique
  username   String
  email      String      @unique
  password   String
  server     String      @unique
  createdAt  DateTime    @default(now())
  createdBy  String?
  updatedAt  DateTime    @updatedAt
  updatedBy  String
  deleteBy   String
  DiscordID  DiscordID[]
}

model ProfileDB {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fname     String
  lname     String
  nickname  String
  age       String
  phone     String
  email     String
  gender    String
  discord   String
  career    String
  createdAt DateTime @default(now())
  createdBy String?
  updatedAt DateTime @updatedAt
  updatedBy String
}

model NewsUpdateDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  img         String
  description String
  creditlink  String
  createdAt   DateTime @default(now())
  createdBy   String?
}

model GuildProfileDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  guildname   String
  description String
  rule        String
  discordlink String
  backdrop    String
  avatar      String
  sex         String
  age         String
  createdAt   DateTime @default(now())
  createdBy   String?
  updatedAt   DateTime @updatedAt
  updatedBy   String
}

model ActDetailDB {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  point       String
  type        String
  img         String
  startdate   String
  enddate     String
  description String
  disname     String
  dislink     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}