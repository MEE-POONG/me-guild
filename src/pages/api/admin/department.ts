import { Prisma, PrismaClient } from "@prisma/client";
import type { NextApiRequest, NextApiResponse } from "next";

const prisma = new PrismaClient();

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    const { method } = req;

    switch (method) {
        case "GET":
            await handleGet(req, res);
            break;
        case "POST":
            await handlePost(req, res);
            break;
        case "PUT":
            await handlePut(req, res);
            break;
        case "DELETE":
            await handleDelete(req, res);
            break;
        default:
            res.setHeader("Allow", ["GET", "POST", "PUT", "DELETE"]);
            res.status(405).end(`Method ${method} Not Allowed`);
    }
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
async function handleGet(req: NextApiRequest, res: NextApiResponse) {
    try {
        const { page = '1', pageSize = '10', keyword = "" } = req.query;

        // ‚úÖ ‡πÉ‡∏ä‡πâ `page` ‡πÅ‡∏•‡∏∞ `pageSize` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pagination
        const pageNum = parseInt(page as string, 10) || 1;
        const pageSizeNum = parseInt(pageSize as string, 10) || 10;
        const skip = (pageNum - 1) * pageSizeNum;

        // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ `keyword`
        const whereClause: Prisma.AdminDepartmentDBWhereInput = {
            deleteBy: '',
            name: keyword ? { contains: keyword as string, mode: 'insensitive' } : undefined,
        };

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å
        const [departments, totalDepartments] = await Promise.all([
            prisma.adminDepartmentDB.findMany({
                where: whereClause,
                include: {
                    adminPositionDB: {
                        orderBy: { priority: 'asc' }, // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° Priority
                    },
                },
                skip,
                take: pageSizeNum,
                orderBy: { createdAt: 'desc' },
            }),
            prisma.adminDepartmentDB.count({ where: whereClause }),
        ]);

        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° Pagination
        res.status(200).json({
            success: true,
            data: departments,
            pagination: {
                totalItems: totalDepartments,
                totalPages: Math.ceil(totalDepartments / pageSizeNum),
                currentPage: pageNum,
                pageSize: pageSizeNum,
            },
        });
    } catch (error) {
        console.error("Error fetching departments:", error);
        res.status(500).json({ success: false, error: "Error fetching departments." });
    }
}


// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏Å‡πÉ‡∏´‡∏°‡πà
async function handlePost(req: NextApiRequest, res: NextApiResponse) {
    const { name, createdBy } = req.body;

    try {
        const newDepartment = await prisma.adminDepartmentDB.create({
            data: {
                name,
                createdBy,
                createdAt: new Date(),
                updatedBy: createdBy || "",
                updatedAt: new Date(),
                deleteBy: "",
            },
        });

        res.status(201).json({ success: true, data: newDepartment });
    } catch (error) {
        res.status(500).json({ success: false, error: "Error creating department." });
    }
}

// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
async function handlePut(req: NextApiRequest, res: NextApiResponse) {
    const { id, name, updatedBy } = req.body;

    try {
        const updatedDepartment = await prisma.adminDepartmentDB.update({
            where: { id },
            data: { name, updatedBy, updatedAt: new Date() },
        });

        res.status(200).json({ success: true, data: updatedDepartment });
    } catch (error) {
        res.status(500).json({ success: false, error: "Error updating department." });
    }
}

// ‚úÖ ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å
async function handleDelete(req: NextApiRequest, res: NextApiResponse) {
    if (req.method !== "DELETE") {
        return res.status(405).json({ success: false, error: "Method Not Allowed" });
    }

    const { id } = req.body; // üÜî ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö

    try {
        // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const department = await prisma.adminDepartmentDB.findUnique({
            where: { id },
            include: { adminPositionDB: true }, // ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        });

        if (!department) {
            return res.status(404).json({ success: false, error: "Department not found." });
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ transaction ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å
        await prisma.$transaction([
            prisma.adminPositionDB.deleteMany({ where: { adminDepartmentId: id } }), // ‡∏•‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            prisma.adminDepartmentDB.delete({ where: { id } }), // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å
        ]);

        res.status(200).json({ success: true, message: "Department and related positions deleted successfully." });
    } catch (error) {
        console.error("Error deleting department:", error);
        res.status(500).json({ success: false, error: "Error deleting department and positions." });
    }
}
