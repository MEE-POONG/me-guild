import { NextApiRequest, NextApiResponse } from "next";
import { MenuPageWebDB, PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();
interface ExtendedMenuPageWebDB extends MenuPageWebDB {
  submenu: MenuPageWebDB[];
}

// ‚úÖ API handler function
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  try {
    switch (req.method) {
      case "GET":
        return await getMenuPageWebs(req, res);
      case "POST":
        return await postMenuPageWeb(req, res);
      case "PUT":
        return await putMenuPageWeb(req, res);
      case "DELETE":
        return await deleteMenuPageWeb(req, res);
      default:
        return res.status(405).json({ success: false, error: "Method Not Allowed" });
    }
  } catch (error) {
    console.error("API Error:", error);
    res.status(500).json({ success: false, error: "Internal Server Error" });
  }
}

// ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (GET /api/pageweb)
async function getMenuPageWebs(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { page = "1", pageSize = "10", keyword = "", id, parent } = req.query;

    // ‚úÖ Convert query parameters
    const pageNum = parseInt(page as string, 10) || 1;
    const pageSizeNum = parseInt(pageSize as string, 10) || 10;
    const skip = (pageNum - 1) * pageSizeNum;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `id` ‡πÅ‡∏•‡∏∞ `parent`
    let parentIdFilter: any = undefined;
    let menuHead: any = null; // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ `menuHead` ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤

    if (parent === "true") {
      parentIdFilter = { not: null }; // ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ parentId (‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢)
    } else if (parent === "false") {
      parentIdFilter = null; // ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ parentId)
    } else if (id && typeof id === "string" && id.trim() !== "") {
      parentIdFilter = id; // ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ parentId = id
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `head` ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ `id`
    if (id && typeof id === "string") {
      menuHead = await prisma.menuPageWebDB.findUnique({
        where: { id: id },
      });
    }

    // ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const whereClause: any = {
      OR: [
        { link: { contains: keyword as string, mode: "insensitive" } },
        { name: { contains: keyword as string, mode: "insensitive" } },
      ],
      parentId: parentIdFilter,
    };

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° priority
    const menuItems = await prisma.menuPageWebDB.findMany({
      where: whereClause,
      skip,
      take: pageSizeNum,
      orderBy: [{ showOrder: "asc" }], // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority
      include: {
        AdminDefaultPermissionDB: true,
      },
    });

    return res.status(200).json({
      success: true,
      head: menuHead, // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ head ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      data: menuItems,
      pagination: {
        totalItems: menuItems.length,
        totalPages: Math.ceil(menuItems.length / pageSizeNum),
        currentPage: pageNum,
        pageSize: pageSizeNum,
      },
    });
  } catch (error) {
    console.error("üö® Error fetching menu items:", error);
    res.status(500).json({ success: false, error: "Error fetching menu items" });
  }
}


// ‚úÖ 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà (POST /api/pageweb)
async function postMenuPageWeb(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { name, description, head, link, icon, manager, parentId, createdBy } = req.body;


    let newPriority = 1;
    let finalParentId = parentId && typeof parentId === "string" && parentId.trim() !== "" ? parentId : null;

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ parentId ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ head = true
    const isHead = finalParentId === null ? true : head;

    // ‚úÖ ‡∏´‡∏≤ priority ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô parentId ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const lastMenu = await prisma.menuPageWebDB.findFirst({
      where: { parentId: finalParentId },
    });


    const data: any = {
      name,
      description,
      head: isHead, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ head ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
      link,
      icon,
      parentId: finalParentId, // ‚úÖ ‡πÉ‡∏ä‡πâ parentId ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      createdBy,
      createdAt: new Date(),
      updatedBy: createdBy || '',
      updatedAt: new Date(),
      deleteBy: '',
    };

    // ‚úÖ ‡∏ñ‡πâ‡∏≤ manager ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô [""] ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà Prisma
    if (Array.isArray(manager)) {
      const cleanedManager = manager.filter((item) => item.trim() !== ""); // ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤ [""] ‡∏≠‡∏≠‡∏Å
      if (cleanedManager.length > 0) {
        data.manager = cleanedManager;
      }
    } else if (typeof manager === "string" && manager.trim() !== "") {
      data.manager = manager.split(",").map((item: string) => item.trim());
    }

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const newPageWeb = await prisma.menuPageWebDB.create({ data });


    // ‚úÖ ‡∏ñ‡πâ‡∏≤ parentId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `subMenu` ‡∏Ç‡∏≠‡∏á `parentId`
    if (finalParentId) {
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å (parent) ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö parentId
      const parentMenu = await prisma.menuPageWebDB.findUnique({
        where: { id: finalParentId },
        select: { subMenu: true }, // ‚úÖ ‡∏î‡∏∂‡∏á subMenu ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      });

      if (parentMenu) {
        const updatedSubMenu = [...(parentMenu.subMenu ?? []), newPageWeb.id]; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° id ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï subMenu ‡∏Ç‡∏≠‡∏á parentId
        await prisma.menuPageWebDB.update({
          where: { id: finalParentId },
          data: { subMenu: updatedSubMenu },
        });

      }
    }

    return res.status(201).json({ success: true, data: newPageWeb });
  } catch (error) {
    console.error("üö® Error creating page web item:", error);
    return res.status(500).json({ success: false, error: `Error creating page web item: ${error}` });
  }
}

// ‚úÖ 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (PUT /api/pageweb?id=xxx)
async function putMenuPageWeb(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { id } = req.query;
    const {
      name,
      description,
      head,
      itOn,
      link,
      icon,
      manager,
      parentId,
      updatedBy
    } = req.body;


    const updatedPageWeb = await prisma.menuPageWebDB.update({
      where: { id: id as string },
      data: {
        name,
        description,
        head,
        itOn,
        link,
        icon,
        manager: typeof manager === "string"
          ? manager.split(",").map((s) => s.trim())
          : Array.isArray(manager)
            ? manager
            : [],
        parentId: parentId || null,
        updatedBy,
        updatedAt: new Date(),
      },
    });

    return res.status(200).json({ success: true, data: updatedPageWeb });
  } catch (error: any) {
    console.error("‚ùå PUT /api/menupageweb error:", error.message);
    return res.status(500).json({
      success: false,
      error: error.message || "Error updating page web item",
    });
  }
}



// ‚úÖ 4. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (DELETE /api/pageweb?id=xxx)
async function deleteMenuPageWeb(req: NextApiRequest, res: NextApiResponse) {
  try {
    const { id } = req.query;

    await prisma.menuPageWebDB.delete({
      where: { id: id as string },
    });

    return res.status(200).json({ success: true, message: "Page web item deleted successfully" });
  } catch (error) {
    return res.status(500).json({ success: false, error: "Error deleting page web item" });
  }
}
